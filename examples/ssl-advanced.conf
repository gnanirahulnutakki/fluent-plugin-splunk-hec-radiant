# Advanced SSL/TLS Configuration (Issues #271, #107)
# Shows SSL certificate handling, custom ciphers, and troubleshooting

# Example 1: Basic SSL with verification
<match **>
  @type splunk_hec_radiant
  protocol https
  hec_host splunk.example.com
  hec_token YOUR_TOKEN_HERE

  # Enable SSL verification (default: true)
  insecure_ssl false

  # Require TLS 1.2 or higher (default: true)
  require_ssl_min_version true
</match>

# Example 2: Custom CA certificate (Issue #271 solution)
<match **>
  @type splunk_hec_radiant
  protocol https
  hec_host splunk.example.com
  hec_token YOUR_TOKEN_HERE

  # Use custom CA certificate file
  # Useful for self-signed certificates or internal PKI
  ca_file /etc/ssl/certs/custom-ca-bundle.crt

  # Or use a directory of CA certificates
  # ca_path /etc/ssl/certs/

  insecure_ssl false
</match>

# Example 3: Client certificate authentication (mutual TLS)
<match **>
  @type splunk_hec_radiant
  protocol https
  hec_host splunk.example.com
  hec_token YOUR_TOKEN_HERE

  # Client certificate for mutual TLS
  client_cert /path/to/client-cert.pem
  client_key /path/to/client-key.pem

  # Server verification
  ca_file /path/to/ca-bundle.crt
  insecure_ssl false
</match>

# Example 4: Custom SSL ciphers (Issue #107)
<match **>
  @type splunk_hec_radiant
  protocol https
  hec_host splunk.example.com
  hec_token YOUR_TOKEN_HERE

  # Specify allowed SSL ciphers
  # This controls which cipher suites are acceptable
  ssl_ciphers [
    "ECDHE-RSA-AES128-GCM-SHA256",
    "ECDHE-RSA-AES256-GCM-SHA384",
    "AES128-GCM-SHA256",
    "AES256-GCM-SHA384"
  ]

  # Only TLS 1.2+
  require_ssl_min_version true
</match>

# Example 5: Troubleshooting weak certificate errors
<match **>
  @type splunk_hec_radiant
  protocol https
  hec_host splunk.example.com
  hec_token YOUR_TOKEN_HERE

  # TEMPORARY WORKAROUND for "certificate key too weak" errors
  # NOT RECOMMENDED FOR PRODUCTION!

  # Option A: Disable SSL verification temporarily (NOT SECURE!)
  # insecure_ssl true

  # Option B: Better solution - provide stronger certificate on Splunk side
  # Then use normal verification:
  insecure_ssl false
  require_ssl_min_version true

  # Option C: Use custom CA if Splunk has self-signed cert
  ca_file /path/to/splunk-ca.crt
</match>

# Example 6: Corporate proxy with SSL inspection
<match **>
  @type splunk_hec_radiant
  protocol https
  hec_host splunk.example.com
  hec_token YOUR_TOKEN_HERE

  # Proxy configuration
  proxy_uri http://proxy.corp.com:8080

  # Use corporate CA certificate bundle
  # This includes the proxy's SSL inspection certificate
  ca_file /etc/ssl/certs/corporate-ca-bundle.crt

  insecure_ssl false
</match>

# Example 7: Complete production SSL configuration
<match **>
  @type splunk_hec_radiant
  protocol https
  hec_host splunk.example.com
  hec_port 8088
  hec_token YOUR_TOKEN_HERE

  # SSL verification enabled
  insecure_ssl false
  require_ssl_min_version true

  # Custom CA for enterprise environment
  ca_file /etc/pki/tls/certs/ca-bundle.crt

  # Specific cipher suites for compliance
  ssl_ciphers [
    "ECDHE-ECDSA-AES256-GCM-SHA384",
    "ECDHE-RSA-AES256-GCM-SHA384",
    "ECDHE-ECDSA-AES128-GCM-SHA256",
    "ECDHE-RSA-AES128-GCM-SHA256"
  ]

  # Connection timeouts
  idle_timeout 5
  open_timeout 10
  read_timeout 10

  # Enable compression
  gzip_compression true
</match>

# Troubleshooting Guide:
#
# Error: "certificate verify failed (EE certificate key too weak)"
# Solution: Regenerate Splunk HEC certificate with stronger keys (2048-bit+ RSA)
#           Or use ca_file to trust the specific certificate
#
# Error: "certificate verify failed (unable to get local issuer certificate)"
# Solution: Provide CA certificate bundle via ca_file or ca_path
#
# Error: "SSL_connect returned=1 errno=0 state=error: wrong version number"
# Solution: Check protocol (should be https), verify HEC port (usually 8088)
#
# Error: Connection timeout
# Solution: Check network, firewall rules, increase open_timeout value
